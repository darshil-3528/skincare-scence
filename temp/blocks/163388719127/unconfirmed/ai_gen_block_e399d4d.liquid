{% doc %}
  @prompt
    Create a Shopify 2.0 section named "bestseller-products" using Liquid, JSON, and Tailwind CSS.
    
    üéØ GOAL:
    Build a dynamic ‚ÄúBestsellers‚Äù section like Pilgrim‚Äôs site that displays featured products in a grid or carousel, supports filtering by collection, shows dynamic reviews, and includes an instant cart drawer add-to-cart experience (no page reload).
    
    ‚ú® FEATURES:
    
    1. SECTION HEADER:
    - Editable title (default: ‚ÄúBestsellers‚Äù)
    - Editable subtitle (default: ‚ÄúUnmissable Favourites You‚Äôll Adore‚Äù)
    - ‚ÄúSee All‚Äù button (editable text + link)
    - Optional collection filter tabs (up to 4) with editable labels and linked collections
      ‚Üí Clicking a tab dynamically switches displayed products.
    
    2. PRODUCT CARDS (Dynamic):
    - Product image
    - Discount badge (auto from compare_at_price)
    - Dynamic reviews (not static):
      ‚Üí Pull average rating and review count dynamically from product metafields or review apps:
         - `product.metafields.reviews.rating.value`
         - `product.metafields.reviews.count`
      ‚Üí If no data, hide rating section.
    - Product title, description, and price (all dynamic)
    - ‚ÄúAdd to Cart‚Äù button (fully dynamic)
    - Optional small label (like ‚Äú#1 in Skincare‚Äù or ‚ÄúSelling Fast‚Äù) from metafield or custom text.
    
    3. ADD TO CART FUNCTIONALITY (AJAX + DRAWER):
    - When ‚ÄúAdd to Cart‚Äù is clicked, product should be added instantly via AJAX (`fetch('/cart/add.js')`).
    - After successful add:
       ‚Üí If user selected ‚ÄúOpen Drawer‚Äù in settings ‚Üí instantly open Shopify‚Äôs built-in cart drawer **without reload**.
       ‚Üí If ‚ÄúShow Notification‚Äù selected ‚Üí show a toast message (‚Äú‚úÖ Product added to cart‚Äù).
       ‚Üí If ‚ÄúRedirect to Cart‚Äù selected ‚Üí go to `/cart`.
    
    üß© Implementation detail:
    Use `document.querySelector('cart-drawer')?.open()` or dispatch the standard Shopify event for the drawer (depending on theme structure).
    Do not reload the page at any point.
    
    4. RESPONSIVE DESIGN:
    - 4 products per row on desktop, 2 on tablet, 1 on mobile
    - Tailwind CSS for layout and hover effects
    
    5. SHOPIFY CUSTOMIZER 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .bestseller-section-{{ ai_gen_id }} {
    padding: {{ section.settings.section_padding_top }}px 0 {{ section.settings.section_padding_bottom }}px;
    background-color: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
  }

  .bestseller-container-{{ ai_gen_id }} {
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .bestseller-header-{{ ai_gen_id }} {
    text-align: {{ section.settings.text_alignment }};
    margin-bottom: 40px;
  }

  .bestseller-title-{{ ai_gen_id }} {
    font-size: {{ section.settings.heading_size }}px;
    font-weight: 600;
    margin: 0 0 12px;
    color: rgb(var(--color-foreground));
  }

  .bestseller-subtitle-{{ ai_gen_id }} {
    font-size: {{ section.settings.subtitle_size }}px;
    color: rgba(var(--color-foreground), 0.7);
    margin: 0 0 24px;
  }

  .bestseller-see-all-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    background-color: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    text-decoration: none;
    border-radius: {{ settings.buttons_radius }}px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .bestseller-see-all-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(var(--color-shadow), 0.15);
  }

  .bestseller-filters-{{ ai_gen_id }} {
    display: flex;
    justify-content: {{ section.settings.text_alignment }};
    gap: 12px;
    margin-bottom: 40px;
    flex-wrap: wrap;
  }

  .bestseller-filter-tab-{{ ai_gen_id }} {
    padding: 10px 20px;
    border: 1px solid rgba(var(--color-foreground), 0.2);
    background: transparent;
    color: rgb(var(--color-foreground));
    border-radius: {{ settings.buttons_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
    font-weight: 500;
  }

  .bestseller-filter-tab-{{ ai_gen_id }}.active {
    background-color: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    border-color: rgb(var(--color-button));
  }

  .bestseller-filter-tab-{{ ai_gen_id }}:hover {
    background-color: rgba(var(--color-foreground), 0.05);
  }

  .bestseller-filter-tab-{{ ai_gen_id }}.active:hover {
    background-color: rgb(var(--color-button));
  }

  .bestseller-products-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: {{ settings.spacing_grid_horizontal }}px;
    margin-bottom: 40px;
  }

  .bestseller-product-card-{{ ai_gen_id }} {
    background: rgb(var(--color-background));
    border-radius: {{ settings.card_corner_radius }}px;
    overflow: hidden;
    transition: all 0.3s ease;
    border: {{ settings.card_border_thickness }}px solid rgba(var(--color-foreground), {{ settings.card_border_opacity | divided_by: 100.0 }});
    box-shadow: {{ settings.card_shadow_horizontal_offset }}px {{ settings.card_shadow_vertical_offset }}px {{ settings.card_shadow_blur }}px rgba(var(--color-shadow), {{ settings.card_shadow_opacity | divided_by: 100.0 }});
  }

  .bestseller-product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
    box-shadow: {{ settings.card_shadow_horizontal_offset }}px {{ settings.card_shadow_vertical_offset | plus: 8 }}px {{ settings.card_shadow_blur | plus: 10 }}px rgba(var(--color-shadow), {{ settings.card_shadow_opacity | divided_by: 100.0 | times: 1.5 }});
  }

  .bestseller-product-image-wrapper-{{ ai_gen_id }} {
    position: relative;
    aspect-ratio: 1;
    overflow: hidden;
  }

  .bestseller-product-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .bestseller-product-card-{{ ai_gen_id }}:hover .bestseller-product-image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .bestseller-discount-badge-{{ ai_gen_id }} {
    position: absolute;
    top: 12px;
    left: 12px;
    background: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    padding: 4px 8px;
    border-radius: {{ settings.badge_corner_radius }}px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
  }

  .bestseller-product-label-{{ ai_gen_id }} {
    position: absolute;
    top: 12px;
    right: 12px;
    background: rgba(var(--color-foreground), 0.9);
    color: rgb(var(--color-background));
    padding: 4px 8px;
    border-radius: {{ settings.badge_corner_radius }}px;
    font-size: 11px;
    font-weight: 500;
    z-index: 2;
  }

  .bestseller-product-info-{{ ai_gen_id }} {
    padding: 20px;
    text-align: {{ settings.card_text_alignment }};
  }

  .bestseller-product-title-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 8px;
    color: rgb(var(--color-foreground));
    line-height: 1.3;
  }

  .bestseller-product-title-{{ ai_gen_id }} a {
    color: inherit;
    text-decoration: none;
  }

  .bestseller-product-title-{{ ai_gen_id }} a:hover {
    color: rgb(var(--color-button));
  }

  .bestseller-product-description-{{ ai_gen_id }} {
    font-size: 14px;
    color: rgba(var(--color-foreground), 0.7);
    margin: 0 0 12px;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .bestseller-reviews-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    justify-content: {{ settings.card_text_alignment }};
    gap: 8px;
    margin-bottom: 12px;
  }

  .bestseller-stars-{{ ai_gen_id }} {
    display: flex;
    gap: 2px;
  }

  .bestseller-star-{{ ai_gen_id }} {
    width: 14px;
    height: 14px;
    fill: #ffd700;
  }

  .bestseller-star-empty-{{ ai_gen_id }} {
    fill: rgba(var(--color-foreground), 0.2);
  }

  .bestseller-review-count-{{ ai_gen_id }} {
    font-size: 12px;
    color: rgba(var(--color-foreground), 0.6);
  }

  .bestseller-price-{{ ai_gen_id }} {
    margin-bottom: 16px;
  }

  .bestseller-price-current-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    color: rgb(var(--color-foreground));
  }

  .bestseller-price-compare-{{ ai_gen_id }} {
    font-size: 14px;
    color: rgba(var(--color-foreground), 0.5);
    text-decoration: line-through;
    margin-left: 8px;
  }

  .bestseller-add-to-cart-{{ ai_gen_id }} {
    width: 100%;
    padding: 12px 20px;
    background-color: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    border: none;
    border-radius: {{ settings.buttons_radius }}px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
  }

  .bestseller-add-to-cart-{{ ai_gen_id }}:hover {
    background-color: rgba(var(--color-button), 0.9);
    transform: translateY(-1px);
  }

  .bestseller-add-to-cart-{{ ai_gen_id }}:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .bestseller-notification-{{ ai_gen_id }} {
    position: fixed;
    top: 20px;
    right: 20px;
    background: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    padding: 16px 24px;
    border-radius: {{ settings.buttons_radius }}px;
    box-shadow: 0 4px 12px rgba(var(--color-shadow), 0.15);
    z-index: 1000;
    transform: translateX(100%);
    transition: transform 0.3s ease;
  }

  .bestseller-notification-{{ ai_gen_id }}.show {
    transform: translateX(0);
  }

  @media screen and (max-width: 990px) {
    .bestseller-products-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
    }
  }

  @media screen and (max-width: 749px) {
    .bestseller-products-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
    }

    .bestseller-filters-{{ ai_gen_id }} {
      justify-content: center;
    }

    .bestseller-product-info-{{ ai_gen_id }} {
      padding: 16px;
    }

    .bestseller-title-{{ ai_gen_id }} {
      font-size: {{ section.settings.heading_size | times: 0.8 }}px;
    }

    .bestseller-subtitle-{{ ai_gen_id }} {
      font-size: {{ section.settings.subtitle_size | times: 0.9 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .bestseller-products-grid-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }
  }
{% endstyle %}

<bestseller-section-{{ ai_gen_id }}
  class="bestseller-section-{{ ai_gen_id }}"
  data-section-id="{{ section.id }}"
  data-cart-action="{{ section.settings.cart_action }}"
  {{ block.shopify_attributes }}
>
  <div class="bestseller-container-{{ ai_gen_id }}">
    <div class="bestseller-header-{{ ai_gen_id }}">
      {% if section.settings.heading != blank %}
        <h2 class="bestseller-title-{{ ai_gen_id }}">{{ section.settings.heading }}</h2>
      {% endif %}
      
      {% if section.settings.subtitle != blank %}
        <p class="bestseller-subtitle-{{ ai_gen_id }}">{{ section.settings.subtitle }}</p>
      {% endif %}
      
      {% if section.settings.see_all_text != blank and section.settings.see_all_link != blank %}
        <a href="{{ section.settings.see_all_link }}" class="bestseller-see-all-{{ ai_gen_id }}">
          {{ section.settings.see_all_text }}
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="m9 18 6-6-6-6"/>
          </svg>
        </a>
      {% endif %}
    </div>

    {% if section.settings.enable_collection_filters %}
      <div class="bestseller-filters-{{ ai_gen_id }}">
        <button 
          class="bestseller-filter-tab-{{ ai_gen_id }} active" 
          data-collection="all"
        >
          All Products
        </button>
        
        {% for i in (1..4) %}
          {% assign collection_key = 'filter_collection_' | append: i %}
          {% assign label_key = 'filter_label_' | append: i %}
          {% assign collection = section.settings[collection_key] %}
          {% assign label = section.settings[label_key] %}
          
          {% if collection != blank and label != blank %}
            <button 
              class="bestseller-filter-tab-{{ ai_gen_id }}" 
              data-collection="{{ collection.handle }}"
            >
              {{ label }}
            </button>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}

    <div class="bestseller-products-grid-{{ ai_gen_id }}" id="bestseller-products-{{ ai_gen_id }}">
      {% assign products_to_show = section.settings.products_to_show %}
      {% assign collection = section.settings.collection %}
      
      {% if collection != blank %}
        {% assign products = collection.products | limit: products_to_show %}
      {% else %}
        {% assign products = collections.all.products | limit: products_to_show %}
      {% endif %}

      {% for product in products %}
        <div class="bestseller-product-card-{{ ai_gen_id }}" data-product-id="{{ product.id }}">
          <div class="bestseller-product-image-wrapper-{{ ai_gen_id }}">
            {% if product.featured_image %}
              <img
                src="{{ product.featured_image | image_url: width: 400 }}"
                alt="{{ product.featured_image.alt | escape }}"
                class="bestseller-product-image-{{ ai_gen_id }}"
                loading="lazy"
                width="400"
                height="400"
              >
            {% else %}
              <div class="bestseller-product-image-placeholder-{{ ai_gen_id }}">
                {{ 'product-1' | placeholder_svg_tag }}
              </div>
            {% endif %}

            {% if product.compare_at_price > product.price %}
              {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
              <div class="bestseller-discount-badge-{{ ai_gen_id }}">
                -{{ discount_percentage }}%
              </div>
            {% endif %}

            {% if section.settings.show_product_labels %}
              {% assign label_metafield = product.metafields.custom.product_label %}
              {% if label_metafield != blank %}
                <div class="bestseller-product-label-{{ ai_gen_id }}">
                  {{ label_metafield }}
                </div>
              {% endif %}
            {% endif %}
          </div>

          <div class="bestseller-product-info-{{ ai_gen_id }}">
            <h3 class="bestseller-product-title-{{ ai_gen_id }}">
              <a href="{{ product.url }}">{{ product.title }}</a>
            </h3>

            {% if section.settings.show_product_description and product.description != blank %}
              <p class="bestseller-product-description-{{ ai_gen_id }}">
                {{ product.description | strip_html | truncate: 100 }}
              </p>
            {% endif %}

            {% if section.settings.show_reviews %}
              {% assign rating = product.metafields.reviews.rating.value %}
              {% assign review_count = product.metafields.reviews.count %}
              
              {% if rating != blank and review_count != blank %}
                <div class="bestseller-reviews-{{ ai_gen_id }}">
                  <div class="bestseller-stars-{{ ai_gen_id }}">
                    {% assign rating_floor = rating | floor %}
                    {% for i in (1..5) %}
                      <svg class="bestseller-star-{{ ai_gen_id }} {% if i > rating_floor %}bestseller-star-empty-{{ ai_gen_id }}{% endif %}" viewBox="0 0 24 24">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                      </svg>
                    {% endfor %}
                  </div>
                  <span class="bestseller-review-count-{{ ai_gen_id }}">({{ review_count }})</span>
                </div>
              {% endif %}
            {% endif %}

            <div class="bestseller-price-{{ ai_gen_id }}">
              <span class="bestseller-price-current-{{ ai_gen_id }}">
                {{ product.price | money }}
              </span>
              {% if product.compare_at_price > product.price %}
                <span class="bestseller-price-compare-{{ ai_gen_id }}">
                  {{ product.compare_at_price | money }}
                </span>
              {% endif %}
            </div>

            <button 
              class="bestseller-add-to-cart-{{ ai_gen_id }}"
              data-product-id="{{ product.id }}"
              data-variant-id="{{ product.selected_or_first_available_variant.id }}"
              {% unless product.available %}disabled{% endunless %}
            >
              {% if product.available %}
                {{ section.settings.add_to_cart_text }}
              {% else %}
                Sold Out
              {% endif %}
            </button>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <div class="bestseller-notification-{{ ai_gen_id }}" id="cart-notification-{{ ai_gen_id }}">
    ‚úÖ Product added to cart
  </div>
</bestseller-section-{{ ai_gen_id }}>

<script>
  (function() {
    class BestsellerSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.cartAction = this.dataset.cartAction;
        this.sectionId = this.dataset.sectionId;
        this.currentFilter = 'all';
        this.allProducts = [];
      }

      connectedCallback() {
        this.setupEventListeners();
        this.loadAllProducts();
      }

      setupEventListeners() {
        const filterTabs = this.querySelectorAll('.bestseller-filter-tab-{{ ai_gen_id }}');
        const addToCartButtons = this.querySelectorAll('.bestseller-add-to-cart-{{ ai_gen_id }}');

        filterTabs.forEach(tab => {
          tab.addEventListener('click', (e) => this.handleFilterClick(e));
        });

        addToCartButtons.forEach(button => {
          button.addEventListener('click', (e) => this.handleAddToCart(e));
        });
      }

      async loadAllProducts() {
        try {
          const response = await fetch(`${window.location.origin}/collections/all/products.json?limit=250`);
          const data = await response.json();
          this.allProducts = data.products;
        } catch (error) {
          console.error('Error loading products:', error);
        }
      }

      handleFilterClick(e) {
        const clickedTab = e.target;
        const collectionHandle = clickedTab.dataset.collection;

        document.querySelectorAll('.bestseller-filter-tab-{{ ai_gen_id }}').forEach(tab => {
          tab.classList.remove('active');
        });
        clickedTab.classList.add('active');

        this.currentFilter = collectionHandle;
        this.filterProducts(collectionHandle);
      }

      async filterProducts(collectionHandle) {
        const productsGrid = this.querySelector('#bestseller-products-{{ ai_gen_id }}');
        
        try {
          let products;
          if (collectionHandle === 'all') {
            products = this.allProducts.slice(0, {{ section.settings.products_to_show }});
          } else {
            const response = await fetch(`${window.location.origin}/collections/${collectionHandle}/products.json?limit={{ section.settings.products_to_show }}`);
            const data = await response.json();
            products = data.products;
          }

          productsGrid.innerHTML = this.renderProducts(products);
          this.setupAddToCartListeners();
        } catch (error) {
          console.error('Error filtering products:', error);
        }
      }

      renderProducts(products) {
        return products.map(product => {
          const variant = product.variants[0];
          const discountPercentage = product.compare_at_price > product.price ? 
            Math.round(((product.compare_at_price - product.price) / product.compare_at_price) * 100) : 0;

          return `
            <div class="bestseller-product-card-{{ ai_gen_id }}" data-product-id="${product.id}">
              <div class="bestseller-product-image-wrapper-{{ ai_gen_id }}">
                ${product.featured_image ? 
                  `<img src="${product.featured_image}" alt="${product.title}" class="bestseller-product-image-{{ ai_gen_id }}" loading="lazy" width="400" height="400">` :
                  `<div class="bestseller-product-image-placeholder-{{ ai_gen_id }}">{{ 'product-1' | placeholder_svg_tag }}</div>`
                }
                ${discountPercentage > 0 ? `<div class="bestseller-discount-badge-{{ ai_gen_id }}">-${discountPercentage}%</div>` : ''}
              </div>
              <div class="bestseller-product-info-{{ ai_gen_id }}">
                <h3 class="bestseller-product-title-{{ ai_gen_id }}">
                  <a href="/products/${product.handle}">${product.title}</a>
                </h3>
                ${product.body_html ? `<p class="bestseller-product-description-{{ ai_gen_id }}">${this.stripHtml(product.body_html).substring(0, 100)}...</p>` : ''}
                <div class="bestseller-price-{{ ai_gen_id }}">
                  <span class="bestseller-price-current-{{ ai_gen_id }}">${this.formatMoney(variant.price)}</span>
                  ${variant.compare_at_price > variant.price ? `<span class="bestseller-price-compare-{{ ai_gen_id }}">${this.formatMoney(variant.compare_at_price)}</span>` : ''}
                </div>
                <button 
                  class="bestseller-add-to-cart-{{ ai_gen_id }}"
                  data-product-id="${product.id}"
                  data-variant-id="${variant.id}"
                  ${!variant.available ? 'disabled' : ''}
                >
                  ${variant.available ? '{{ section.settings.add_to_cart_text }}' : 'Sold Out'}
                </button>
              </div>
            </div>
          `;
        }).join('');
      }

      setupAddToCartListeners() {
        const addToCartButtons = this.querySelectorAll('.bestseller-add-to-cart-{{ ai_gen_id }}');
        addToCartButtons.forEach(button => {
          button.addEventListener('click', (e) => this.handleAddToCart(e));
        });
      }

      async handleAddToCart(e) {
        e.preventDefault();
        const button = e.target;
        const variantId = button.dataset.variantId;
        
        if (!variantId || button.disabled) return;

        button.disabled = true;
        const originalText = button.textContent;
        button.textContent = 'Adding...';

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 1
            })
          });

          if (response.ok) {
            this.handleCartSuccess();
          } else {
            throw new Error('Failed to add to cart');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          this.showNotification('‚ùå Error adding to cart');
        } finally {
          button.disabled = false;
          button.textContent = originalText;
        }
      }

      handleCartSuccess() {
        switch (this.cartAction) {
          case 'drawer':
            this.openCartDrawer();
            break;
          case 'notification':
            this.showNotification('‚úÖ Product added to cart');
            break;
          case 'redirect':
            window.location.href = '/cart';
            break;
        }
      }

      openCartDrawer() {
        const cartDrawer = document.querySelector('cart-drawer');
        if (cartDrawer && typeof cartDrawer.open === 'function') {
          cartDrawer.open();
        } else {
          document.dispatchEvent(new CustomEvent('cart:open-drawer'));
        }
      }

      showNotification(message) {
        const notification = this.querySelector('#cart-notification-{{ ai_gen_id }}');
        notification.textContent = message;
        notification.classList.add('show');
        
        setTimeout(() => {
          notification.classList.remove('show');
        }, 3000);
      }

      stripHtml(html) {
        const tmp = document.createElement('div');
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || '';
      }

      formatMoney(cents) {
        return new Intl.NumberFormat('{{ shop.locale }}', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(cents / 100);
      }
    }

    customElements.define('bestseller-section-{{ ai_gen_id }}', BestsellerSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Bestseller products",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Section header"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Bestsellers"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Unmissable Favourites You'll Adore"
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 16
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "text",
      "id": "see_all_text",
      "label": "See all button text",
      "default": "See All"
    },
    {
      "type": "url",
      "id": "see_all_link",
      "label": "See all button link"
    },
    {
      "type": "header",
      "content": "Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 4,
      "max": 20,
      "step": 2,
      "label": "Products to show",
      "default": 8
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart button text",
      "default": "Add to Cart"
    },
    {
      "type": "select",
      "id": "cart_action",
      "label": "After adding to cart",
      "options": [
        {
          "value": "drawer",
          "label": "Open cart drawer"
        },
        {
          "value": "notification",
          "label": "Show notification"
        },
        {
          "value": "redirect",
          "label": "Redirect to cart page"
        }
      ],
      "default": "notification"
    },
    {
      "type": "header",
      "content": "Product display"
    },
    {
      "type": "checkbox",
      "id": "show_product_description",
      "label": "Show product description",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_reviews",
      "label": "Show product reviews",
      "default": true,
      "info": "Requires review app with metafields: reviews.rating and reviews.count"
    },
    {
      "type": "checkbox",
      "id": "show_product_labels",
      "label": "Show product labels",
      "default": true,
      "info": "Requires custom metafield: custom.product_label"
    },
    {
      "type": "header",
      "content": "Collection filters"
    },
    {
      "type": "checkbox",
      "id": "enable_collection_filters",
      "label": "Enable collection filter tabs",
      "default": true
    },
    {
      "type": "text",
      "id": "filter_label_1",
      "label": "Filter 1 label"
    },
    {
      "type": "collection",
      "id": "filter_collection_1",
      "label": "Filter 1 collection"
    },
    {
      "type": "text",
      "id": "filter_label_2",
      "label": "Filter 2 label"
    },
    {
      "type": "collection",
      "id": "filter_collection_2",
      "label": "Filter 2 collection"
    },
    {
      "type": "text",
      "id": "filter_label_3",
      "label": "Filter 3 label"
    },
    {
      "type": "collection",
      "id": "filter_collection_3",
      "label": "Filter 3 collection"
    },
    {
      "type": "text",
      "id": "filter_label_4",
      "label": "Filter 4 label"
    },
    {
      "type": "collection",
      "id": "filter_collection_4",
      "label": "Filter 4 collection"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "Bestseller products"
    }
  ]
}
{% endschema %}